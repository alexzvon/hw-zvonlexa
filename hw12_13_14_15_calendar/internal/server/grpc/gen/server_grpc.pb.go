// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: api/calendar/server.proto

package grpcserver

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GRPCServerClient is the client API for GRPCServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCServerClient interface {
	CreateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*IDEvent, error)
	UpdateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteEvent(ctx context.Context, in *IDEvent, opts ...grpc.CallOption) (*empty.Empty, error)
	ListEventsToDay(ctx context.Context, in *DateTime, opts ...grpc.CallOption) (*Events, error)
	ListEventsToWeek(ctx context.Context, in *DateTime, opts ...grpc.CallOption) (*Events, error)
	ListEventsToMonth(ctx context.Context, in *DateTime, opts ...grpc.CallOption) (*Events, error)
}

type gRPCServerClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCServerClient(cc grpc.ClientConnInterface) GRPCServerClient {
	return &gRPCServerClient{cc}
}

func (c *gRPCServerClient) CreateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*IDEvent, error) {
	out := new(IDEvent)
	err := c.cc.Invoke(ctx, "/grpcserver.GRPCServer/CreateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCServerClient) UpdateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grpcserver.GRPCServer/UpdateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCServerClient) DeleteEvent(ctx context.Context, in *IDEvent, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grpcserver.GRPCServer/DeleteEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCServerClient) ListEventsToDay(ctx context.Context, in *DateTime, opts ...grpc.CallOption) (*Events, error) {
	out := new(Events)
	err := c.cc.Invoke(ctx, "/grpcserver.GRPCServer/ListEventsToDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCServerClient) ListEventsToWeek(ctx context.Context, in *DateTime, opts ...grpc.CallOption) (*Events, error) {
	out := new(Events)
	err := c.cc.Invoke(ctx, "/grpcserver.GRPCServer/ListEventsToWeek", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCServerClient) ListEventsToMonth(ctx context.Context, in *DateTime, opts ...grpc.CallOption) (*Events, error) {
	out := new(Events)
	err := c.cc.Invoke(ctx, "/grpcserver.GRPCServer/ListEventsToMonth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCServerServer is the server API for GRPCServer service.
// All implementations must embed UnimplementedGRPCServerServer
// for forward compatibility
type GRPCServerServer interface {
	CreateEvent(context.Context, *Event) (*IDEvent, error)
	UpdateEvent(context.Context, *Event) (*empty.Empty, error)
	DeleteEvent(context.Context, *IDEvent) (*empty.Empty, error)
	ListEventsToDay(context.Context, *DateTime) (*Events, error)
	ListEventsToWeek(context.Context, *DateTime) (*Events, error)
	ListEventsToMonth(context.Context, *DateTime) (*Events, error)
	mustEmbedUnimplementedGRPCServerServer()
}

// UnimplementedGRPCServerServer must be embedded to have forward compatible implementations.
type UnimplementedGRPCServerServer struct {
}

func (UnimplementedGRPCServerServer) CreateEvent(context.Context, *Event) (*IDEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (UnimplementedGRPCServerServer) UpdateEvent(context.Context, *Event) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEvent not implemented")
}
func (UnimplementedGRPCServerServer) DeleteEvent(context.Context, *IDEvent) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvent not implemented")
}
func (UnimplementedGRPCServerServer) ListEventsToDay(context.Context, *DateTime) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEventsToDay not implemented")
}
func (UnimplementedGRPCServerServer) ListEventsToWeek(context.Context, *DateTime) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEventsToWeek not implemented")
}
func (UnimplementedGRPCServerServer) ListEventsToMonth(context.Context, *DateTime) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEventsToMonth not implemented")
}
func (UnimplementedGRPCServerServer) mustEmbedUnimplementedGRPCServerServer() {}

// UnsafeGRPCServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCServerServer will
// result in compilation errors.
type UnsafeGRPCServerServer interface {
	mustEmbedUnimplementedGRPCServerServer()
}

func RegisterGRPCServerServer(s grpc.ServiceRegistrar, srv GRPCServerServer) {
	s.RegisterService(&GRPCServer_ServiceDesc, srv)
}

func _GRPCServer_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCServerServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcserver.GRPCServer/CreateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCServerServer).CreateEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCServer_UpdateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCServerServer).UpdateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcserver.GRPCServer/UpdateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCServerServer).UpdateEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCServer_DeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCServerServer).DeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcserver.GRPCServer/DeleteEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCServerServer).DeleteEvent(ctx, req.(*IDEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCServer_ListEventsToDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateTime)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCServerServer).ListEventsToDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcserver.GRPCServer/ListEventsToDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCServerServer).ListEventsToDay(ctx, req.(*DateTime))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCServer_ListEventsToWeek_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateTime)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCServerServer).ListEventsToWeek(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcserver.GRPCServer/ListEventsToWeek",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCServerServer).ListEventsToWeek(ctx, req.(*DateTime))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCServer_ListEventsToMonth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateTime)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCServerServer).ListEventsToMonth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcserver.GRPCServer/ListEventsToMonth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCServerServer).ListEventsToMonth(ctx, req.(*DateTime))
	}
	return interceptor(ctx, in, info, handler)
}

// GRPCServer_ServiceDesc is the grpc.ServiceDesc for GRPCServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPCServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcserver.GRPCServer",
	HandlerType: (*GRPCServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEvent",
			Handler:    _GRPCServer_CreateEvent_Handler,
		},
		{
			MethodName: "UpdateEvent",
			Handler:    _GRPCServer_UpdateEvent_Handler,
		},
		{
			MethodName: "DeleteEvent",
			Handler:    _GRPCServer_DeleteEvent_Handler,
		},
		{
			MethodName: "ListEventsToDay",
			Handler:    _GRPCServer_ListEventsToDay_Handler,
		},
		{
			MethodName: "ListEventsToWeek",
			Handler:    _GRPCServer_ListEventsToWeek_Handler,
		},
		{
			MethodName: "ListEventsToMonth",
			Handler:    _GRPCServer_ListEventsToMonth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/calendar/server.proto",
}
